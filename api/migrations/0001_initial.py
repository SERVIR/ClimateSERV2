# Generated by Django 3.2.6 on 2022-02-15 20:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Config_Setting',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('setting_name', models.CharField(default='UNKNOWN_SETTING', help_text='What is the name of this setting.  These are meant to be unique but not constrained by the database.  If there are any settings with the exact same name, please delete the duplicates.', max_length=250, verbose_name='Setting Name')),
                ('setting_value', models.TextField(default='{}', help_text='Setting Value.  Can be a string, or JSON Object, etc.  If this value is just a string or number only, remove the {} default.', verbose_name='Setting Value')),
                ('setting_data_type', models.CharField(default='STRING', help_text="Setting Datatype.  This is important.  Choices are: 'STRING', 'LIST', 'JSON'.  If the datatype is not recognized, then STRING is used.  Note: JSON types are loaded with json.loads(<value>).  Note: LIST types are read as comma separated strings.  Something like '1,2,3' would get converted into ['1','2','3'] to be used in the code.  List Items have to be strings, not numbers, and not complex objects.  List Item Type conversion and validation happens at the code where it is needed.", max_length=250, verbose_name='Setting Data Type')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
            ],
            options={
                'verbose_name': 'Config Setting',
                'verbose_name_plural': 'Config Settings',
                'ordering': ['setting_name'],
            },
        ),
        migrations.CreateModel(
            name='ETL_Dataset',
            fields=[
                ('uuid', models.CharField(auto_created=True, default=uuid.uuid4, max_length=40, primary_key=True, serialize=False)),
                ('dataset_name', models.CharField(default='Unknown Dataset Name', help_text='A Human Readable Custom Name to identify this dataset.  Typically expected usage would be for Admin to set this name so they can quickly understand which data set they are looking at.  They could also use the other TDS fields to understand exactly which dataset this refers to.', max_length=90, verbose_name='Human Readable Dataset Short Name')),
                ('dataset_subtype', models.CharField(default='Unknown_Dataset_Subtype', help_text='IMPORTANT: This setting is used by the pipeline to select which specific sub type script logic gets used to execute the ETL job.  There are a set list of Subtypes, use python manage.py list_etl_dataset_subtypes to see a list of all subtypes.', max_length=90, verbose_name='Dataset Subtype')),
                ('is_pipeline_enabled', models.BooleanField(default=False, help_text="Is this ETL Dataset currently set to 'enabled' for ETL Pipeline processing?  If this is set to False, then when the ETL job runs to process this incoming data, the ETL pipeline for this process will be stopped before it makes an attempt.  This is intended as a way for admin to just 'turn off' or 'turn on' a specific ETL job that has been setup.")),
                ('is_pipeline_active', models.BooleanField(default=False, help_text='Is this ETL Dataset currently being run through the ETL Pipeline? If this is set to True, that means an ETL job is actually running for this specific dataset and data ingestion is currently in progress.  When a pipeline finishes (success or error) this value should be set to False by the pipeline code.')),
                ('capabilities', models.TextField(default='{}', help_text="Set Automatically by ETL Pipeline.  Please don't touch this!  Messing with this will likely result in broken content elsewhere in the system.  This is a field to hold Dataset specific information that the clientside code may need access to in order to properly render the details from this dataset.  (In ClimateSERV 1.0, some of this was a GeoReference, Time/Date Ranges, and other information.)", verbose_name='JSON Data')),
                ('temp_working_dir', models.TextField(default='', help_text='The local filesystem place to store data', verbose_name='(Path) Local temp working directory')),
                ('final_load_dir', models.TextField(default='', help_text='The local filesystem place to store the final NC4 files (The THREDDS monitored Directory location)', verbose_name='(Path) Local NC4 directory')),
                ('source_url', models.TextField(default='', help_text='The remote location', verbose_name='(URL) Remote location')),
                ('tds_product_name', models.CharField(default='UNKNOWN_PRODUCT_NAME', help_text="The Product name as defined on the THREDDS Data Server (TDS) Conventions Document.  Example Value: 'EMODIS-NDVI'", max_length=90, verbose_name='(TDS Conventions) Product Name')),
                ('tds_region', models.CharField(default='UNKNOWN_REGION', help_text="The Region as defined on the THREDDS Data Server (TDS) Conventions Document.  Example Value: 'Global'", max_length=90, verbose_name='(TDS Conventions) Region')),
                ('tds_spatial_resolution', models.CharField(default='UNKNOWN_SPATIAL_RESOLUTION', help_text="The Spatial Resolution as defined on the THREDDS Data Server (TDS) Conventions Document.  Example Value: '250m'", max_length=90, verbose_name='(TDS Conventions) Spatial Resolution')),
                ('tds_temporal_resolution', models.CharField(default='UNKNOWN_TEMPORAL_RESOLUTION', help_text="The Temporal Resolution as defined on the THREDDS Data Server (TDS) Conventions Document.  Example Value: '2mon'", max_length=90, verbose_name='(TDS Conventions) Temporal Resolution')),
                ('dataset_legacy_datatype', models.CharField(default='9999', help_text="The 'datatype' number from ClimateSERV 1.0.  This is mapped in support of Legacy API Requests", max_length=5, verbose_name='Legacy datatype')),
                ('dataset_nc4_variable_name', models.CharField(default='ndvi', help_text='To select data from an NC4 file requires a variable name.  This is the field where a variable name must be set for the selection from NC4 file to work properly.', max_length=40, verbose_name='Variable Name inside NC4 File')),
                ('is_lat_order_reversed', models.BooleanField(default=False, help_text='Some datasets have their lat order reversed.  The downstream affect of this has to do with NC4 data selection.  If this flag is set to True then we use, latitude=slice(max_Lat, min_Lat), if it is set to false, then the selection uses latitude=slice(min_Lat, max_Lat) - Note, at the time of this writing, NDVI types should be set to False')),
                ('dataset_base_directory_path', models.CharField(default='UNSET', help_text='This is a field that tells the job processing code where to look to find ALL of the NetCDF files (NC4 files) for this dataset.  In many cases (at this time all cases) this is the same as the setting for the THREDDS output directory. This is an absolute path which means the directory path should begin with /.  The code that uses this also expects a / at the end of the directory name.', max_length=255, verbose_name='Base Directory Path')),
                ('additional_json', models.TextField(default='{}', help_text="Extra data field.  Please don't touch this!  Messing with this will likely result in broken content elsewhere in the system.", verbose_name='JSON Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('created_by', models.CharField(default='Table_Default_Process', help_text='Who or What Process created this record? 90 chars max', max_length=90, verbose_name='Created By User or Process Name or ID')),
                ('is_test_object', models.BooleanField(default=False, help_text='Is this Instance meant to be used ONLY for internal platform testing? (Used only for easy cleanup - DO NOT DEPEND ON FOR VALIDATION)')),
            ],
            options={
                'verbose_name': 'ETL Dataset',
                'verbose_name_plural': 'ETL Datasets',
                'ordering': ['dataset_name'],
            },
        ),
        migrations.CreateModel(
            name='ETL_Granule',
            fields=[
                ('uuid', models.CharField(default=uuid.uuid4, editable=False, max_length=40, primary_key=True, serialize=False)),
                ('granule_name', models.CharField(default='Unknown Granule Name', help_text="Most of the time, this may be a filename.  Sometimes it is not.  It should be a name that is unique to the combination of dataset and temporal data value.  This row should be useful in tracking down the specific granule's file/source info.", max_length=250, verbose_name='Granule Name')),
                ('granule_contextual_information', models.TextField(default='No Additional Information', help_text='A way to capture additional contextual information around a granule, if needed.', verbose_name='Granule Contextual Information')),
                ('is_missing', models.BooleanField(default=False, help_text='Was this expected granule missing at the time of processing?  If this is set to True, that means during an ingest run, there was an expected granule that was either not found at the data source, or had an error that made it unable to be processed and ingested.  The time that this record gets created as compared to ETL Log rows would be a good way to nail down the exact issue as more data is stored about issues in the ETL Log table.')),
                ('granule_pipeline_state', models.CharField(default='UNSET_ATTEMPTED', help_text='Each Individual Granule has a pipeline state.  This lets us easily understand if the Granule succeeded or failed', max_length=20, verbose_name='Granule Pipeline State')),
                ('additional_json', models.TextField(default='{}', help_text="Extra data field.  Please don't touch this!  Messing with this will likely result in broken content elsewhere in the system.", verbose_name='JSON Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('created_by', models.CharField(default='Table_Default_Process', help_text='Who or What Process created this record? 90 chars max', max_length=90, verbose_name='Created By User or Process Name or ID')),
                ('is_test_object', models.BooleanField(default=False, help_text='Is this Instance meant to be used ONLY for internal platform testing? (Used only for easy cleanup - DO NOT DEPEND ON FOR VALIDATION)')),
                ('etl_dataset', models.ForeignKey(blank=True, help_text='Each Individual Granule has a parent ETL Dataset, storing the association here', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.etl_dataset')),
            ],
            options={
                'verbose_name': 'ETL Granule',
                'verbose_name_plural': 'ETL Granules',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ETL_PipelineRun',
            fields=[
                ('uuid', models.CharField(auto_created=True, default=uuid.uuid4, max_length=40, primary_key=True, serialize=False)),
                ('additional_json', models.TextField(default='{}', help_text="Extra data field.  Please don't touch this!  Messing with this will likely result in broken content elsewhere in the system.", verbose_name='JSON Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('created_by', models.CharField(default='Table_Default_Process', help_text='Who or What Process created this record? 90 chars max', max_length=90, verbose_name='Created By User or Process Name or ID')),
                ('is_test_object', models.BooleanField(default=False, help_text='Is this Instance meant to be used ONLY for internal platform testing? (Used only for easy cleanup - DO NOT DEPEND ON FOR VALIDATION)')),
            ],
            options={
                'verbose_name': 'ETL Pipeline Run',
                'verbose_name_plural': 'ETL Pipeline Runs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Request_Log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_id', models.CharField(max_length=50)),
                ('log', models.JSONField()),
                ('log_date', models.CharField(max_length=50)),
                ('log_dat', models.CharField(blank=True, default='', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Request_Progress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.CharField(max_length=50)),
                ('progress', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Run_ETL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('etl', models.CharField(choices=[('7bac5ccd-03cc-4c20-8b1e-147c2ef3b6e8', 'CHIRP'), ('703fef5d-8648-4422-92f4-30d48f9cf133', 'CHIRPS'), ('98891fe7-f8c6-4bc3-9926-4c3e4ebe8445', 'USDA SMAP')], default='CHIRPS', max_length=60)),
                ('start_year', models.CharField(default='2020', max_length=4)),
                ('end_year', models.CharField(default='2020', max_length=4)),
                ('start_month', models.CharField(default='1', max_length=2)),
                ('end_month', models.CharField(default='12', max_length=2)),
                ('start_day', models.CharField(default='1', max_length=2)),
                ('end_day', models.CharField(default='30', max_length=2)),
                ('from_last_processed', models.BooleanField(default=False)),
                ('merge_periodically', models.BooleanField(default=False, verbose_name='Merge')),
            ],
            options={
                'verbose_name': 'ETL Run',
                'verbose_name_plural': 'ETL runs',
            },
        ),
        migrations.CreateModel(
            name='Storage_Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_id', models.CharField(default=uuid.uuid4, editable=False, max_length=50)),
                ('directory', models.CharField(default=None, help_text='Path you want to monitor', max_length=50)),
                ('file_size', models.CharField(default='0', editable=False, max_length=50, verbose_name='Size')),
                ('free_space', models.CharField(editable=False, max_length=50)),
                ('threshold', models.IntegerField(default='50', help_text='Threshold in GB, upon reaching sends an email', verbose_name='Threshold in megabytes(GB)')),
                ('last_notified_time', models.DateTimeField(blank=True, editable=False, null=True)),
                ('time_to_check', models.IntegerField(default='15', help_text='Time in minutes to check and notify')),
            ],
            options={
                'verbose_name': 'Storage Review',
                'verbose_name_plural': 'Storage Review',
            },
        ),
        migrations.CreateModel(
            name='Track_Usage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_id', models.CharField(max_length=50)),
                ('originating_IP', models.CharField(default=None, max_length=50)),
                ('time_requested', models.DateTimeField(default=django.utils.timezone.now)),
                ('AOI', models.JSONField(default=None)),
                ('dataset', models.CharField(default=None, max_length=50)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('calculation', models.CharField(default=None, max_length=50, null=True)),
                ('request_type', models.CharField(default=None, max_length=50)),
                ('status', models.CharField(default=None, max_length=50)),
                ('file_size', models.IntegerField(default=0)),
                ('API_call', models.CharField(blank=True, max_length=250, null=True)),
                ('data_retrieved', models.BooleanField(default=False)),
                ('progress', models.CharField(default='0', max_length=50)),
                ('ui_request', models.BooleanField(default=False, help_text='Is this request originated through the CS UI?')),
                ('country_ISO', models.CharField(help_text='ISO Country Code for originating IP', max_length=2)),
                ('metadata_request', models.BooleanField(default=False, help_text='Is this a request for metadata instead of actual data (eg., information about what data is available)?')),
            ],
            options={
                'verbose_name': 'Usage Record',
                'verbose_name_plural': 'Usage Records',
                'ordering': ['-time_requested'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gmail_password', models.CharField(blank=True, max_length=50)),
                ('etl_alerts', models.BooleanField(default=False)),
                ('feedback_alerts', models.BooleanField(default=False)),
                ('storage_alerts', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ETL_Log',
            fields=[
                ('uuid', models.CharField(default=uuid.uuid4, editable=False, max_length=40, primary_key=True, serialize=False)),
                ('activity_event_type', models.TextField(default='Unknown ETL Activity Event Type', help_text='What is the standardized type for this ETL Activity Event?', max_length=255, verbose_name='Standardized Activity Event Type')),
                ('activity_description', models.TextField(default='No Description', help_text='A field for more detailed information on an ETL Event Activity', verbose_name='Activity Description')),
                ('is_alert', models.BooleanField(default=False, help_text='Is this an Item that should be considered an alert?  (by default, all errors and warnings are considered alerts)')),
                ('is_alert_dismissed', models.BooleanField(default=False, help_text='Setting this to True will change the display style for the admin.')),
                ('additional_json', models.TextField(default='{}', help_text="Extra data field.  Please don't touch this!  Messing with this will likely result in broken content elsewhere in the system.", verbose_name='JSON Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('created_by', models.CharField(default='Table_Default_Process', help_text='Who or What Process created this record? 90 chars max', max_length=255, verbose_name='Created By User or Process Name or ID')),
                ('is_test_object', models.BooleanField(default=False, help_text='Is this Instance meant to be used ONLY for internal platform testing? (Used only for easy cleanup - DO NOT DEPEND ON FOR VALIDATION)')),
                ('status', models.CharField(default='In Progress', max_length=255, verbose_name='Status')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='start_time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='end_time')),
                ('etl_dataset', models.ForeignKey(blank=True, help_text='If there is an associated ETL Dataset UUID, it should appear here.  Note: This field may be blank or unset, not all events will have one of these associated items.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.etl_dataset')),
                ('etl_granule', models.ForeignKey(blank=True, help_text='If there is an associated ETL Granule UUID, it should appear here.  Note: This field may be blank or unset, not all events will have one of these associated items.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.etl_granule')),
                ('etl_pipeline_run', models.ForeignKey(blank=True, help_text='Each time the ETL Pipeline runs, there is a unique ID generated, this field operates like a way to tag which pipeline this row is attached to.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.etl_pipelinerun')),
            ],
            options={
                'verbose_name': 'ETL Log',
                'verbose_name_plural': 'ETL Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='etl_granule',
            name='etl_pipeline_run',
            field=models.ForeignKey(blank=True, help_text='Each time the ETL Pipeline runs, there is a unique ID generated, this field operates like a way to tag which pipeline this row is attached to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.etl_pipelinerun'),
        ),
    ]
